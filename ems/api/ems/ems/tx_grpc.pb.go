// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: ems/ems/tx.proto

package ems

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Msg_UpdateParams_FullMethodName   = "/ems.ems.Msg/UpdateParams"
	Msg_CreateEvent_FullMethodName    = "/ems.ems.Msg/CreateEvent"
	Msg_UpdateEvent_FullMethodName    = "/ems.ems.Msg/UpdateEvent"
	Msg_DeleteEvent_FullMethodName    = "/ems.ems.Msg/DeleteEvent"
	Msg_PurchaseTicket_FullMethodName = "/ems.ems.Msg/PurchaseTicket"
	Msg_ResaleTicket_FullMethodName   = "/ems.ems.Msg/ResaleTicket"
)

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	CreateEvent(ctx context.Context, in *MsgCreateEvent, opts ...grpc.CallOption) (*MsgCreateEventResponse, error)
	UpdateEvent(ctx context.Context, in *MsgUpdateEvent, opts ...grpc.CallOption) (*MsgUpdateEventResponse, error)
	DeleteEvent(ctx context.Context, in *MsgDeleteEvent, opts ...grpc.CallOption) (*MsgDeleteEventResponse, error)
	PurchaseTicket(ctx context.Context, in *MsgPurchaseTicket, opts ...grpc.CallOption) (*MsgPurchaseTicketResponse, error)
	ResaleTicket(ctx context.Context, in *MsgResaleTicket, opts ...grpc.CallOption) (*MsgResaleTicketResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateParams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateEvent(ctx context.Context, in *MsgCreateEvent, opts ...grpc.CallOption) (*MsgCreateEventResponse, error) {
	out := new(MsgCreateEventResponse)
	err := c.cc.Invoke(ctx, Msg_CreateEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateEvent(ctx context.Context, in *MsgUpdateEvent, opts ...grpc.CallOption) (*MsgUpdateEventResponse, error) {
	out := new(MsgUpdateEventResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteEvent(ctx context.Context, in *MsgDeleteEvent, opts ...grpc.CallOption) (*MsgDeleteEventResponse, error) {
	out := new(MsgDeleteEventResponse)
	err := c.cc.Invoke(ctx, Msg_DeleteEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PurchaseTicket(ctx context.Context, in *MsgPurchaseTicket, opts ...grpc.CallOption) (*MsgPurchaseTicketResponse, error) {
	out := new(MsgPurchaseTicketResponse)
	err := c.cc.Invoke(ctx, Msg_PurchaseTicket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ResaleTicket(ctx context.Context, in *MsgResaleTicket, opts ...grpc.CallOption) (*MsgResaleTicketResponse, error) {
	out := new(MsgResaleTicketResponse)
	err := c.cc.Invoke(ctx, Msg_ResaleTicket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	CreateEvent(context.Context, *MsgCreateEvent) (*MsgCreateEventResponse, error)
	UpdateEvent(context.Context, *MsgUpdateEvent) (*MsgUpdateEventResponse, error)
	DeleteEvent(context.Context, *MsgDeleteEvent) (*MsgDeleteEventResponse, error)
	PurchaseTicket(context.Context, *MsgPurchaseTicket) (*MsgPurchaseTicketResponse, error)
	ResaleTicket(context.Context, *MsgResaleTicket) (*MsgResaleTicketResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (UnimplementedMsgServer) CreateEvent(context.Context, *MsgCreateEvent) (*MsgCreateEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEvent not implemented")
}
func (UnimplementedMsgServer) UpdateEvent(context.Context, *MsgUpdateEvent) (*MsgUpdateEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEvent not implemented")
}
func (UnimplementedMsgServer) DeleteEvent(context.Context, *MsgDeleteEvent) (*MsgDeleteEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEvent not implemented")
}
func (UnimplementedMsgServer) PurchaseTicket(context.Context, *MsgPurchaseTicket) (*MsgPurchaseTicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurchaseTicket not implemented")
}
func (UnimplementedMsgServer) ResaleTicket(context.Context, *MsgResaleTicket) (*MsgResaleTicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResaleTicket not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CreateEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateEvent(ctx, req.(*MsgCreateEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateEvent(ctx, req.(*MsgUpdateEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_DeleteEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteEvent(ctx, req.(*MsgDeleteEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PurchaseTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPurchaseTicket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PurchaseTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_PurchaseTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PurchaseTicket(ctx, req.(*MsgPurchaseTicket))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ResaleTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgResaleTicket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ResaleTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ResaleTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ResaleTicket(ctx, req.(*MsgResaleTicket))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ems.ems.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "CreateEvent",
			Handler:    _Msg_CreateEvent_Handler,
		},
		{
			MethodName: "UpdateEvent",
			Handler:    _Msg_UpdateEvent_Handler,
		},
		{
			MethodName: "DeleteEvent",
			Handler:    _Msg_DeleteEvent_Handler,
		},
		{
			MethodName: "PurchaseTicket",
			Handler:    _Msg_PurchaseTicket_Handler,
		},
		{
			MethodName: "ResaleTicket",
			Handler:    _Msg_ResaleTicket_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ems/ems/tx.proto",
}
